package view;

import controller.*;

import java.io.File;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.event.*;
import java.util.concurrent.Semaphore;


public class ProgBots extends JFrame
{
  private GameController gameController;

  private final int SIZE = 500;

  private Semaphore gameSemaphore;

  /** Creates new form ProgBots */
  public ProgBots() {
    gameController = new GameController(SIZE, SIZE);
    gameSemaphore = new Semaphore(1, true);
    gameController.setGameSemaphore(gameSemaphore);
    initComponents();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">
  private void initComponents() {
      this.setResizable(false);
      addRobot = new javax.swing.JButton();
      startMatch = new javax.swing.JButton();
      arena = new Arena(gameController);
      arena.setBackground(Color.WHITE);
      arena.setBorder(BorderFactory.createLineBorder(Color.black, 1));

      robotListScrollPane = new javax.swing.JScrollPane();
      
      robotListModel = new DefaultListModel();

      robotList = new JList(robotListModel);
      robotList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
      robotList.setSelectedIndex(0);
      robotList.setVisibleRowCount(5);

      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

      addRobot.setText("Load Robot");
      addRobot.addActionListener(new LoadRobotListener(this));
      addRobot.setActionCommand("loadRobot");

      startMatch.setText("Start Match");
      startMatch.addActionListener(new StartMatchListener(this));
      startMatch.setActionCommand("startMatch");

      GroupLayout arenaLayout = new GroupLayout(arena);
      arena.setLayout(arenaLayout);
      arenaLayout.setHorizontalGroup(
          arenaLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
          .addGap(0, SIZE, Short.MAX_VALUE)
      );
      arenaLayout.setVerticalGroup(
          arenaLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
          .addGap(0, SIZE, Short.MAX_VALUE)
      );

      robotListScrollPane.setViewportView(robotList);

      GroupLayout layout = new GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
          layout.createParallelGroup(GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
              .addContainerGap()
              .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                  .addGroup(layout.createSequentialGroup()
                      .addComponent(arena, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                      .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                      .addComponent(robotListScrollPane, GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE))
                  .addGroup(layout.createSequentialGroup()
                      .addComponent(addRobot)
                      .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                      .addComponent(startMatch)))
              .addContainerGap())
      );
      layout.setVerticalGroup(
          layout.createParallelGroup(GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
              .addContainerGap()
              .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                  .addComponent(addRobot)
                  .addComponent(startMatch))
              .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
              .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                  .addComponent(robotListScrollPane, GroupLayout.Alignment.LEADING)
                  .addComponent(arena, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
              .addContainerGap(10, Short.MAX_VALUE))
      );

      pack();
  }// </editor-fold>

  /**
  * @param args the command line arguments
  */
  public static void main(String args[]) {
      java.awt.EventQueue.invokeLater(new Runnable() {
          public void run() {
              new ProgBots().setVisible(true);
          }
      });
  }

  // Variables declaration - do not modify
  private javax.swing.JButton addRobot;
  private javax.swing.JPanel arena;
  private javax.swing.JList robotList;
  private javax.swing.JScrollPane robotListScrollPane;
  private javax.swing.JButton startMatch;
  private javax.swing.DefaultListModel robotListModel;
  // End of variables declaration

  private class LoadRobotListener implements ActionListener
  {
    private JFrame frame;

    public LoadRobotListener(JFrame frame)
    {
      this.frame = frame;
    }

    public void actionPerformed(ActionEvent e)
    {
      if(e.getActionCommand().equals("loadRobot"))
        loadRobot();
    }

    public void loadRobot()
    {
      JFileChooser fc = new JFileChooser();
      int returnVal = fc.showOpenDialog(frame);

      if(returnVal != JFileChooser.APPROVE_OPTION) {
        JOptionPane.showMessageDialog(frame, 
            "Select a JAR file that contains a Robot class definition",
            "File",
            JOptionPane.WARNING_MESSAGE);
        return;
      }

      File file = fc.getSelectedFile();
      model.RobotAPI robot = gameController.loadRobot(file);

      if( robot == null ) {
        JOptionPane.showMessageDialog(frame, "Robot not added successfully",
            "Robot NOT added",
            JOptionPane.ERROR_MESSAGE);
        return;
      }
      
      int index = robotList.getSelectedIndex(); //get selected index
      if (index == -1) { //no selection, so insert at beginning
          index = 0;
      } else {           //add after the selected item
          index++;
      }

      robotListModel.insertElementAt(robot.toString(), index);
      robotList.setSelectedIndex(index);
      robotList.ensureIndexIsVisible(index);

      JOptionPane.showMessageDialog(frame, robot.toString() + 
          " added successfully");
    }
  }

  private class StartMatchListener implements ActionListener
  {
    private JFrame frame;
    private boolean started = false;

    public StartMatchListener(JFrame frame)
    {
      this.frame = frame;
    }

    public void actionPerformed(ActionEvent e)
    {
      if(e.getActionCommand().equals("startMatch"))
      {
        startMatch.setText("Pause Match");
        startMatch.setActionCommand("stopMatch");

        gameController.setRunning(true);


        if(!started)
        {
          addRobot.setEnabled(false);

          for(model.RobotAPI api : gameController.getRobots())
          {
            model.Robot robot = api.getRobot();

            Thread t = new Thread(robot);
            t.start();
          }
        }

        started = true;
      }
      else if(e.getActionCommand().equals("stopMatch"))
      {
        startMatch.setText("Unpause Match");
        startMatch.setActionCommand("startMatch");

        gameController.setRunning(false);
      }
    }
  }

  private class RobotListDataListener implements ListDataListener
  {
    public void contentsChanged(ListDataEvent e)
    {
    }
    public void intervalAdded(ListDataEvent e) 
    {
    }
    public void intervalRemoved(ListDataEvent e)
    {
    }
  }
}
